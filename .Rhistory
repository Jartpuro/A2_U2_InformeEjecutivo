install.packages("learnr")          # solo una vez
install.packages("devtools")     # solo una vez
devtools::install_github("dgonxalex80/paqueteMODELOS") #descarga paquete
learnr::run_tutorial("Tutorial101", "paqueteMODELOS")  # carga Tutorial101
learnr::run_tutorial("Tutorial102", "paqueteMODELOS)  # carga Tutorial102
learnr::run_tutorial("Tutorial102", "paqueteMETODOS)  # carga Tutorial102
learnr::run_tutorial("Tutorial102", "paqueteMETODOS)  # carga Tutorial102
learnr::run_tutorial("Tutorial102", "paqueteMETODOS")  # carga Tutorial102
# devtools::install_github("dgonxalex80/paqueteMODELOS", force = TRUE)
library(paqueteMODELOS)
data(vivenda)
str(vivienda)
devtools::install_github("dgonxalex80/paqueteMODELOS", force = TRUE)
knitr::opts_chunk$set(echo = TRUE)
devtools::install_github("dgonxalex80/paqueteMODELOS", force = TRUE)
devtools::install_github("dgonxalex80/paqueteMODELOS", force = TRUE)
knitr::opts_chunk$set(echo = TRUE)
devtools::install_github("dgonxalex80/paqueteMODELOS", force = TRUE)
library(paqueteMODELOS)
data(vivenda)
str(vivienda)
# Tratamiento de valores faltantes
vivienda <- na.omit(vivienda)
# Estandarización de variables si es necesario
# En este caso, parece que no es necesario estandarizar ninguna variable
# Transformaciones adecuadas para cada técnica de análisis
# En este caso, no se requieren transformaciones adicionales
# Aplicación de PCA
pca_result <- prcomp(vivienda[, c('preciom', 'areaconst', 'parqueaderos', 'banios', 'habitaciones')], scale. = TRUE)
# Visualización de la varianza explicada por cada componente principal
summary(pca_result)
# Gráfico de varianza explicada
plot(pca_result, type = "l")
# Selección de variables relevantes para el clustering
vivienda_cluster <- vivienda[, c('preciom', 'areaconst', 'parqueaderos', 'banios', 'habitaciones')]
# Normalización de los datos
vivienda_scaled <- scale(vivienda_cluster)
# Determinar el número óptimo de clusters utilizando el método del codo o la silueta
# (código para uno de los métodos)
wss <- (nrow(vivienda_scaled)-1)*sum(apply(vivienda_scaled,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(vivienda_scaled, centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
# Aplicación de K-means con el número óptimo de clusters
k <- 5  # número óptimo de clusters obtenido del análisis anterior
kmeans_result <- kmeans(vivienda_scaled, centers = k)
# Visualización de los clusters
clusplot(vivienda_scaled, kmeans_result$cluster, color=TRUE, shade=TRUE, labels=2, lines=0)
# Aplicación de PCA
pca_result <- prcomp(vivienda[, c('preciom', 'areaconst', 'parqueaderos', 'banios', 'habitaciones')], scale. = TRUE)
# Visualización de la varianza explicada por cada componente principal
summary(pca_result)
# Gráfico de varianza explicada
plot(pca_result, type = "l")
print(plot)
# Aplicación de PCA
pca_result <- prcomp(vivienda[, c('preciom', 'areaconst', 'parqueaderos', 'banios', 'habitaciones')], scale. = TRUE)
# Visualización de la varianza explicada por cada componente principal
summary(pca_result)
# Gráfico de varianza explicada
plot(pca_result, type = "l")
# Selección de variables relevantes para el clustering
vivienda_cluster <- vivienda[, c('preciom', 'areaconst', 'parqueaderos', 'banios', 'habitaciones')]
# Normalización de los datos
vivienda_scaled <- scale(vivienda_cluster)
# Determinar el número óptimo de clusters utilizando el método del codo o la silueta
# (código para uno de los métodos)
wss <- (nrow(vivienda_scaled)-1)*sum(apply(vivienda_scaled,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(vivienda_scaled, centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
# Aplicación de K-means con el número óptimo de clusters
k <- 5  # número óptimo de clusters obtenido del análisis anterior
kmeans_result <- kmeans(vivienda_scaled, centers = k)
# Visualización de los clusters
clusplot(vivienda_scaled, kmeans_result$cluster, color=TRUE, shade=TRUE, labels=2, lines=0)
# Instalar y cargar el paquete 'cluster' si no está instalado
if (!requireNamespace("cluster", quietly = TRUE)) {
install.packages("cluster")
}
# Cargar el paquete 'cluster'
library(cluster)
# Selección de variables relevantes para el clustering
vivienda_cluster <- vivienda[, c('preciom', 'areaconst', 'parqueaderos', 'banios', 'habitaciones')]
# Normalización de los datos
vivienda_scaled <- scale(vivienda_cluster)
# Determinar el número óptimo de clusters utilizando el método del codo o la silueta
# (código para uno de los métodos)
wss <- (nrow(vivienda_scaled)-1)*sum(apply(vivienda_scaled,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(vivienda_scaled, centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
# Aplicación de K-means con el número óptimo de clusters
k <- 5  # número óptimo de clusters obtenido del análisis anterior
kmeans_result <- kmeans(vivienda_scaled, centers = k)
# Visualización de los clusters
clusplot(vivienda_scaled, kmeans_result$cluster, color=TRUE, shade=TRUE, labels=2, lines=0)
# Aplicación de PCA
pca_result <- prcomp(vivienda[, c('preciom', 'areaconst', 'parqueaderos', 'banios', 'habitaciones')], scale. = TRUE)
# Visualización de la varianza explicada por cada componente principal
summary(pca_result)
# Gráfico de varianza explicada
plot(pca_result, type = "l")
# Instalar y cargar el paquete 'cluster' si no está instalado
if (!requireNamespace("cluster", quietly = TRUE)) {
install.packages("cluster")
}
# Cargar el paquete 'cluster'
library(cluster)
# Selección de variables relevantes para el clustering
vivienda_cluster <- vivienda[, c('preciom', 'areaconst', 'parqueaderos', 'banios', 'habitaciones')]
# Normalización de los datos
vivienda_scaled <- scale(vivienda_cluster)
# Determinar el número óptimo de clusters utilizando el método del codo o la silueta
# (código para uno de los métodos)
wss <- (nrow(vivienda_scaled)-1)*sum(apply(vivienda_scaled,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(vivienda_scaled, centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
# Aplicación de K-means con el número óptimo de clusters
k <- 5  # número óptimo de clusters obtenido del análisis anterior
kmeans_result <- kmeans(vivienda_scaled, centers = k)
# Visualización de los clusters
clusplot(vivienda_scaled, kmeans_result$cluster, color=TRUE, shade=TRUE, labels=2, lines=0)
cls
clearConsole()
clearConsole()
knitr::opts_chunk$set(echo = TRUE)
devtools::install_github("dgonxalex80/paqueteMODELOS", force = TRUE)
library(paqueteMODELOS)
data(vivenda)
str(vivienda)
# Tratamiento de valores faltantes
vivienda <- na.omit(vivienda)
# Estandarización de variables si es necesario
# En este caso, parece que no es necesario estandarizar ninguna variable
# Transformaciones adecuadas para cada técnica de análisis
# En este caso, no se requieren transformaciones adicionales
# Aplicación de PCA
pca_result <- prcomp(vivienda[, c('preciom', 'areaconst', 'parqueaderos', 'banios', 'habitaciones')], scale. = TRUE)
# Visualización de la varianza explicada por cada componente principal
summary(pca_result)
# Gráfico de varianza explicada
plot(pca_result, type = "l")
# Instalar y cargar el paquete 'cluster' si no está instalado
if (!requireNamespace("cluster", quietly = TRUE)) {
install.packages("cluster")
}
# Cargar el paquete 'cluster'
library(cluster)
# Selección de variables relevantes para el clustering
vivienda_cluster <- vivienda[, c('preciom', 'areaconst', 'parqueaderos', 'banios', 'habitaciones')]
# Normalización de los datos
vivienda_scaled <- scale(vivienda_cluster)
# Determinar el número óptimo de clusters utilizando el método del codo o la silueta
# (código para uno de los métodos)
wss <- (nrow(vivienda_scaled)-1)*sum(apply(vivienda_scaled,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(vivienda_scaled, centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
# Aplicación de K-means con el número óptimo de clusters
k <- 5  # número óptimo de clusters obtenido del análisis anterior
kmeans_result <- kmeans(vivienda_scaled, centers = k)
# Visualización de los clusters
clusplot(vivienda_scaled, kmeans_result$cluster, color=TRUE, shade=TRUE, labels=2, lines=0)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
devtools::install_github("dgonxalex80/paqueteMODELOS", force = TRUE)
library(paqueteMODELOS)
data(vivenda)
str(vivienda)
## 1. Preprocesamiento de datos:
## 1. Preprocesamiento de datos:
# Tratamiento de valores faltantes
vivienda <- na.omit(vivienda)
# Estandarización de variables si es necesario
# En este caso, parece que no es necesario estandarizar ninguna variable
# Transformaciones adecuadas para cada técnica de análisis
# En este caso, no se requieren transformaciones adicionales
# Aplicación de PCA
pca_result <- prcomp(vivienda[, c('preciom', 'areaconst', 'parqueaderos', 'banios', 'habitaciones')], scale. = TRUE)
# Visualización de la varianza explicada por cada componente principal
summary(pca_result)
# Gráfico de varianza explicada
plot(pca_result, type = "l")
# Instalar y cargar el paquete 'cluster' si no está instalado
if (!requireNamespace("cluster", quietly = TRUE)) {
install.packages("cluster")
}
# Cargar el paquete 'cluster'
library(cluster)
# Selección de variables relevantes para el clustering
vivienda_cluster <- vivienda[, c('preciom', 'areaconst', 'parqueaderos', 'banios', 'habitaciones')]
# Normalización de los datos
vivienda_scaled <- scale(vivienda_cluster)
# Determinar el número óptimo de clusters utilizando el método del codo o la silueta
# (código para uno de los métodos)
wss <- (nrow(vivienda_scaled)-1)*sum(apply(vivienda_scaled,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(vivienda_scaled, centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
# Aplicación de K-means con el número óptimo de clusters
k <- 5  # número óptimo de clusters obtenido del análisis anterior
kmeans_result <- kmeans(vivienda_scaled, centers = k)
# Visualización de los clusters
clusplot(vivienda_scaled, kmeans_result$cluster, color=TRUE, shade=TRUE, labels=2, lines=0)
# Convertir variables categóricas a factores si es necesario
vivienda$tipo <- as.factor(vivienda$tipo)
vivienda$zona <- as.factor(vivienda$zona)
vivienda$barrio <- as.factor(vivienda$barrio)
# Análisis de Correspondencia
library(ca)
# Convertir variables categóricas a factores si es necesario
vivienda$tipo <- as.factor(vivienda$tipo)
vivienda$zona <- as.factor(vivienda$zona)
vivienda$barrio <- as.factor(vivienda$barrio)
# Instalar el paquete 'ca'
install.packages("ca")
# Análisis de Correspondencia
library(ca)
ac_result <- ca(vivienda[, c('tipo', 'zona', 'barrio')])
# Instalación y carga de las librerías necesarias (si no están instaladas)
if (!require(tidyverse)) {
install.packages("tidyverse")
}
if (!require(ggplot2)) {
install.packages("ggplot2")
}
# Carga de librerías
library(tidyverse)
library(ggplot2)
# Gráfico de histograma para la variable 'preciom'
ggplot(vivienda, aes(x = preciom)) +
geom_histogram(binwidth = 50, fill = "skyblue", color = "black") +
labs(title = "Distribución de los precios de las viviendas",
x = "Precio",
y = "Frecuencia")
# Gráfico de barras para la variable 'zona'
ggplot(vivienda, aes(x = zona)) +
geom_bar(fill = "skyblue", color = "black") +
labs(title = "Distribución de las viviendas por zona",
x = "Zona",
y = "Frecuencia") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Gráfico de dispersión para 'preciom' vs 'areaconst'
ggplot(vivienda, aes(x = areaconst, y = preciom)) +
geom_point(color = "skyblue") +
labs(title = "Relación entre el área construida y el precio",
x = "Área construida",
y = "Precio")
# Gráfico de cajas para 'estrato'
ggplot(vivienda, aes(x = as.factor(estrato), y = preciom)) +
geom_boxplot(fill = "skyblue") +
labs(title = "Distribución de precios por estrato",
x = "Estrato",
y = "Precio")
# Gráfico de barras para 'tipo'
ggplot(vivienda, aes(x = tipo)) +
geom_bar(fill = "skyblue", color = "black") +
labs(title = "Distribución de las viviendas por tipo",
x = "Tipo",
y = "Frecuencia") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
knitr::opts_chunk$set(echo = TRUE)
# Convertir variables categóricas a factores si es necesario
vivienda$tipo <- as.factor(vivienda$tipo)
vivienda$zona <- as.factor(vivienda$zona)
vivienda$barrio <- as.factor(vivienda$barrio)
# Seleccionar solo variables categóricas para el análisis de correspondencia
variables_categoricas <- vivienda[, c('tipo', 'zona', 'barrio')]
# Análisis de Correspondencia
library(ca)
ac_result <- ca(variables_categoricas)
knitr::opts_chunk$set(echo = TRUE)
head(vivienda)
levels(vivienda$tipo)
levels(vivienda$zona)
levels(vivienda$barrio)
summary(vivienda)
knitr::opts_chunk$set(echo = TRUE)
# Verificar si hay valores faltantes en todas las columnas
any_missing <- apply(vivienda, 2, function(x) any(is.na(x)))
# Mostrar el resultado
print(any_missing)
gptstudio:::addin_chatgpt()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
kable(summary(vivienda))
kable(summary(vivienda))
#devtools::install_github("dgonxalex80/paqueteMODELOS", force = TRUE)
library(paqueteMODELOS)
# Instalación y carga de las librerías necesarias (si no están instaladas)
if (!require(tidyverse)) {
install.packages("tidyverse")
}
if (!require(ggplot2)) {
install.packages("ggplot2")
}
# Carga de librerías
library(tidyverse)
library(ggplot2)
# Instalar y cargar el paquete 'cluster' si no está instalado
if (!requireNamespace("cluster", quietly = TRUE)) {
install.packages("cluster")
}
# Cargar el paquete 'cluster'
library(cluster)
# Luego, carga el paquete
library(knitr)
options(tibble.width = Inf)
kable(head(vivienda))
kable(summary(vivienda))
#devtools::install_github("dgonxalex80/paqueteMODELOS", force = TRUE)
library(paqueteMODELOS)
# Instalación y carga de las librerías necesarias (si no están instaladas)
if (!require(tidyverse)) {
install.packages("tidyverse")
}
if (!require(ggplot2)) {
install.packages("ggplot2")
}
# Carga de librerías
library(tidyverse)
library(ggplot2)
# Instalar y cargar el paquete 'cluster' si no está instalado
if (!requireNamespace("cluster", quietly = TRUE)) {
install.packages("cluster")
}
# Cargar el paquete 'cluster'
library(cluster)
library(knitr)
library(naniar)
#devtools::install_github("dgonxalex80/paqueteMODELOS", force = TRUE)
library(paqueteMODELOS)
# Instalación y carga de las librerías necesarias (si no están instaladas)
if (!require(tidyverse)) {
install.packages("tidyverse")
}
if (!require(ggplot2)) {
install.packages("ggplot2")
}
# Carga de librerías
library(tidyverse)
library(ggplot2)
# Instalar y cargar el paquete 'cluster' si no está instalado
if (!requireNamespace("cluster", quietly = TRUE)) {
install.packages("cluster")
}
# Cargar el paquete 'cluster'
library(cluster)
library(knitr)
library(naniar)
library(dplyr)
#devtools::install_github("dgonxalex80/paqueteMODELOS", force = TRUE)
library(paqueteMODELOS)
# Instalación y carga de las librerías necesarias (si no están instaladas)
if (!require(tidyverse)) {
install.packages("tidyverse")
}
if (!require(ggplot2)) {
install.packages("ggplot2")
}
# Carga de librerías
library(tidyverse)
library(ggplot2)
# Instalar y cargar el paquete 'cluster' si no está instalado
if (!requireNamespace("cluster", quietly = TRUE)) {
install.packages("cluster")
}
# Cargar el paquete 'cluster'
library(cluster)
library(knitr)
library(naniar)
library(dplyr)
# Calcular el total de valores faltantes por columna
total_missing <- colSums(is.na(vivienda))
# Convertir el resultado en un dataframe y eliminar la fila adicional de nombres de columnas
result_df <- data.frame(Columna = names(total_missing), Valores_Faltantes = total_missing)
result_df <- result_df[!result_df$Columna %in% colnames(vivienda), , drop = FALSE]
# Organizar los resultados según la columna "Valores_Faltantes" de forma descendente
result_df <- arrange(result_df, desc(Valores_Faltantes))
# Mostrar los resultados en una tabla
kable(result_df)
View(vivienda_cluster)
View(vivienda)
#devtools::install_github("dgonxalex80/paqueteMODELOS", force = TRUE)
library(paqueteMODELOS)
# Instalación y carga de las librerías necesarias (si no están instaladas)
if (!require(tidyverse)) {
install.packages("tidyverse")
}
if (!require(ggplot2)) {
install.packages("ggplot2")
}
# Instalar y cargar el paquete 'psych' para cálculos estadísticos
if (!requireNamespace("psych", quietly = TRUE)) {
install.packages("psych")
}
# Instalar y cargar el paquete 'cluster' si no está instalado
if (!requireNamespace("cluster", quietly = TRUE)) {
install.packages("cluster")
}
# Carga de librerías
library(tidyverse)
library(ggplot2)
library(cluster)
library(knitr)
library(naniar)
library(dplyr)
library(psych)
View(vivienda_cluster)
View(vivienda)
View(variables_categoricas)
knitr::opts_chunk$set(echo = TRUE)
install.packages("learnr")          # solo una vez
install.packages("devtools")     # solo una vez
devtools::install_github("dgonxalex80/paqueteMODELOS") #descarga paquete
learnr::run_tutorial("Tutorial201", "paqueteMODELOS")  # carga Tutorial201
learnr::run_tutorial("Tutorial202", "paqueteMODELOS")  # carga Tutorial202
knitr::opts_chunk$set(echo = TRUE)
install.packages("devtools") # solo la primera vez
devtools::install_github("dgonxalex80/paqueteMODELOS", force =TRUE)
library(paqueteMODELOS)
data("vivienda")
str(data)
str("vivienda")
View(vivienda)
str(vivienda)
install.packages("devtools") # solo la primera vez
devtools::install_github("dgonxalex80/paqueteMODELOS", force =TRUE)
library(paqueteMODELOS)
library(knitr)
library(devtools)
data("vivienda")
Sys.setenv(LANG="es.UTF-8")
Sys.setenv(LANG="es.UTF-8")
Sys.setenv(LANG="es.UTF-8")
jose
Sys.setenv(LANG="es.UTF-8")
jose
install.packages("languages")
library(languages)
install.packages("devtools") # solo la primera vez
devtools::install_github("dgonxalex80/paqueteMODELOS", force =TRUE)
